# -*- coding: utf-8 -*-
"""test anh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bvstAYnmGPOpTHuYuKZHU1saF0qOhksY
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import tensorflow as tf
import seaborn as sns
import matplotlib.pyplot as plt
import cv2
from google.colab.patches import cv2_imshow #only in Colab because using cv2.imshow is not allowed in Colab
cv2.__version__

# Commented out IPython magic to ensure Python compatibility.
import os 
import imutils
import numpy as np
# %matplotlib inline

# Param
max_size = 5000
min_size = 900

# create path to file
folder_path = "/content/drive/My Drive/data/week 10/data_car"
file_name = "128.jpg"
absolute_path = os.path.join(folder_path, file_name)

# load image
image = cv2.imread(absolute_path)

print("Image Size: {}".format(image.shape))

# Only in Colab
cv2_imshow(image)

# resize image
w = 620
h = 480
image = cv2.resize(image, (w,h))
cv2_imshow(image)

# Edge detection
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # convert to grey scale
gray = cv2.bilateralFilter(gray, 11, 17, 17)  # Blur to reduce noise
edged = cv2.Canny(gray, 30, 200)  # Perform Edge detection
cv2_imshow(edged)

# find contours in the edged image, keep only the largest
# ones, and initialize our screen contour
cnts = cv2.findContours(edged.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)
cnts = sorted(cnts, key=cv2.contourArea, reverse=True)
screenCnt = None
print(len(cnts))

# loop over our contours
for c in cnts:
    # approximate the contour
    peri = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.05 * peri, True)

    # if our approximated contour has four points, then
    # we can assume that we have found our screen
    if len(approx) == 4 and max_size > cv2.contourArea(c) > min_size:
        screenCnt = approx
        break

img = image.copy()
cv2.drawContours(img, [screenCnt], -1 ,(0,255,0),3)
cv2_imshow(img)

if screenCnt is None:
    detected = 0
    print ("No plate detected")
else:
    detected = 1

if detected == 1:
    cv2.drawContours(img, [screenCnt], -1, (0, 255, 0), 3)

    # Masking the part other than the number plate
    mask = np.zeros(gray.shape, np.uint8)
    new_image = cv2.drawContours(mask, [screenCnt], 0, 255, -1, )
    new_image = cv2.bitwise_and(img, img, mask=mask)

    # Now crop
    (x, y) = np.where(mask == 255)
    (topx, topy) = (np.min(x), np.min(y))
    (bottomx, bottomy) = (np.max(x), np.max(y))
    Cropped = gray[topx:bottomx + 1, topy:bottomy + 1]
cv2_imshow(Cropped)